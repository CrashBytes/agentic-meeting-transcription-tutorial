version: '3.8'

services:
  # Backend API
  api:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-meeting_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-meeting_transcription}
      - REDIS_URL=redis://redis:6379/0
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE:-base}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - qdrant
      - postgres
      - redis
    volumes:
      - ./data/meetings:/tmp/meetings
      - ./backend/app:/app/app
    restart: unless-stopped
    networks:
      - meeting-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - meeting-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-meeting_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-meeting_transcription}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - meeting-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - meeting-network

volumes:
  qdrant_data:
  postgres_data:
  redis_data:

networks:
  meeting-network:
    driver: bridge
